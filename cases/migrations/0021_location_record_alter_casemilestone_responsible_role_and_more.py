# Generated by Django 4.2.7 on 2025-07-31 18:31

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('cases', '0020_casefielddata_casemilestone_casemilestoneprogress_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="A unique name for the location (e.g., 'CTO Record Room', 'AAO John Doe's Desk').", max_length=200, unique=True)),
                ('location_type', models.CharField(choices=[('RECORD_ROOM', 'Record Room'), ('EXTERNAL_OFFICE', 'External Office'), ('USER_DESK', 'User Desk')], help_text='The category of the location.', max_length=20)),
                ('address', models.TextField(blank=True, help_text='Physical address or description of the location.')),
            ],
            options={
                'verbose_name': 'Record Location',
                'verbose_name_plural': 'Record Locations',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_type', models.CharField(choices=[('SERVICE_BOOK', 'Service Book'), ('PENSION_FILE', 'Pension File')], help_text='The type of the record.', max_length=20)),
                ('status', models.CharField(choices=[('AVAILABLE', 'Available'), ('IN_USE', 'In Use'), ('REQUISITIONED', 'Requisitioned'), ('MISSING', 'Missing'), ('NOT_APPLICABLE', 'Not Applicable')], default='AVAILABLE', help_text='The current status of the record.', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_location', models.ForeignKey(help_text='The current physical location of the record.', on_delete=django.db.models.deletion.PROTECT, to='cases.location')),
                ('pensioner', models.ForeignKey(help_text='The pensioner this record belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='records', to='cases.ppomaster')),
            ],
            options={
                'verbose_name': 'Physical Record',
                'verbose_name_plural': 'Physical Records',
                'ordering': ['pensioner__employee_name', 'record_type'],
                'unique_together': {('record_type', 'pensioner')},
            },
        ),
        migrations.AlterField(
            model_name='casemilestone',
            name='responsible_role',
            field=models.CharField(choices=[('DH', 'Dealing Hand'), ('AAO', 'Assistant Accounts Officer'), ('AO', 'Accounts Officer'), ('Dy.CCA', 'Deputy Chief Controller of Accounts'), ('Jt.CCA', 'Joint Chief Controller of Accounts'), ('CCA', 'Chief Controller of Accounts'), ('Pr.CCA', 'Principal Chief Controller of Accounts'), ('ADMIN', 'Administrator'), ('RECORD_KEEPER', 'Record Keeper')], max_length=20),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='role',
            field=models.CharField(choices=[('DH', 'Dealing Hand'), ('AAO', 'Assistant Accounts Officer'), ('AO', 'Accounts Officer'), ('Dy.CCA', 'Deputy Chief Controller of Accounts'), ('Jt.CCA', 'Joint Chief Controller of Accounts'), ('CCA', 'Chief Controller of Accounts'), ('Pr.CCA', 'Principal Chief Controller of Accounts'), ('ADMIN', 'Administrator'), ('RECORD_KEEPER', 'Record Keeper')], max_length=20),
        ),
        migrations.CreateModel(
            name='RecordRequisition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING_APPROVAL', 'Pending AAO Approval'), ('REJECTED', 'Rejected'), ('APPROVED', 'Approved (Pending Handover)'), ('IN_TRANSIT', 'In Transit'), ('IN_USE', 'In Use (Handed Over)'), ('RETURN_REQUESTED', 'Return Requested'), ('RETURN_APPROVED', 'Return Approved'), ('RETURNED', 'Returned (Closed)')], default='PENDING_APPROVAL', max_length=20)),
                ('is_return_request', models.BooleanField(default=False, help_text='Check this if this is a request to return records.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approving_aao', models.ForeignKey(help_text='The AAO responsible for approving this request.', on_delete=django.db.models.deletion.PROTECT, related_name='approved_requisitions', to='cases.userprofile')),
                ('case', models.ForeignKey(help_text='The case that this requisition is for.', on_delete=django.db.models.deletion.CASCADE, related_name='requisitions', to='cases.case')),
                ('records_requested', models.ManyToManyField(help_text='The specific records being requested.', to='cases.record')),
                ('requester_dh', models.ForeignKey(help_text='The Dealing Hand who initiated the request.', on_delete=django.db.models.deletion.PROTECT, related_name='made_requisitions', to='cases.userprofile')),
            ],
            options={
                'verbose_name': 'Record Requisition',
                'verbose_name_plural': 'Record Requisitions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecordMovement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, help_text='The exact date and time of the handover.')),
                ('comments', models.TextField(blank=True)),
                ('acknowledged_by', models.ForeignKey(help_text='The user who received the record and acknowledged the handover.', on_delete=django.db.models.deletion.PROTECT, to='cases.userprofile')),
                ('from_location', models.ForeignKey(help_text='The location the record came from.', on_delete=django.db.models.deletion.PROTECT, related_name='moves_from', to='cases.location')),
                ('record', models.ForeignKey(help_text='The specific record that was moved.', on_delete=django.db.models.deletion.CASCADE, related_name='movements', to='cases.record')),
                ('requisition', models.ForeignKey(help_text='The requisition that authorized this movement.', on_delete=django.db.models.deletion.CASCADE, related_name='movements', to='cases.recordrequisition')),
                ('to_location', models.ForeignKey(help_text='The location the record went to.', on_delete=django.db.models.deletion.PROTECT, related_name='moves_to', to='cases.location')),
            ],
            options={
                'verbose_name': 'Record Movement Log',
                'verbose_name_plural': 'Record Movement Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddField(
            model_name='location',
            name='custodian',
            field=models.ForeignKey(blank=True, help_text='The user responsible for this location (e.g., the record keeper for a room).', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cases.userprofile'),
        ),
        migrations.CreateModel(
            name='HistoricalRecordRequisition',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING_APPROVAL', 'Pending AAO Approval'), ('REJECTED', 'Rejected'), ('APPROVED', 'Approved (Pending Handover)'), ('IN_TRANSIT', 'In Transit'), ('IN_USE', 'In Use (Handed Over)'), ('RETURN_REQUESTED', 'Return Requested'), ('RETURN_APPROVED', 'Return Approved'), ('RETURNED', 'Returned (Closed)')], default='PENDING_APPROVAL', max_length=20)),
                ('is_return_request', models.BooleanField(default=False, help_text='Check this if this is a request to return records.')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('approving_aao', models.ForeignKey(blank=True, db_constraint=False, help_text='The AAO responsible for approving this request.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cases.userprofile')),
                ('case', models.ForeignKey(blank=True, db_constraint=False, help_text='The case that this requisition is for.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cases.case')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('requester_dh', models.ForeignKey(blank=True, db_constraint=False, help_text='The Dealing Hand who initiated the request.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cases.userprofile')),
            ],
            options={
                'verbose_name': 'historical Record Requisition',
                'verbose_name_plural': 'historical Record Requisitions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalRecord',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('record_type', models.CharField(choices=[('SERVICE_BOOK', 'Service Book'), ('PENSION_FILE', 'Pension File')], help_text='The type of the record.', max_length=20)),
                ('status', models.CharField(choices=[('AVAILABLE', 'Available'), ('IN_USE', 'In Use'), ('REQUISITIONED', 'Requisitioned'), ('MISSING', 'Missing'), ('NOT_APPLICABLE', 'Not Applicable')], default='AVAILABLE', help_text='The current status of the record.', max_length=20)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('current_location', models.ForeignKey(blank=True, db_constraint=False, help_text='The current physical location of the record.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cases.location')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('pensioner', models.ForeignKey(blank=True, db_constraint=False, help_text='The pensioner this record belongs to.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cases.ppomaster')),
            ],
            options={
                'verbose_name': 'historical Physical Record',
                'verbose_name_plural': 'historical Physical Records',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='CaseTypeTrigger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trigger_event', models.CharField(choices=[('ON_CASE_CREATION', 'On Case Creation'), ('ON_CASE_COMPLETION', 'On Case Completion')], help_text='The event that will fire this trigger.', max_length=25)),
                ('records_to_request', models.CharField(choices=[('SERVICE_BOOK', 'Service Book'), ('PENSION_FILE', 'Pension File')], max_length=20)),
                ('case_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='record_triggers', to='cases.casetype')),
            ],
            options={
                'verbose_name': 'Case Type Record Trigger',
                'verbose_name_plural': 'Case Type Record Triggers',
                'unique_together': {('case_type', 'trigger_event', 'records_to_request')},
            },
        ),
    ]
